// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#ifndef PK_FUNCTOR_ROW_MIN_HPP
#define PK_FUNCTOR_ROW_MIN_HPP

template <class ExecSpace>struct pk_functor_row_min{struct row_min_tag{};int32_t dim;Kokkos::View<int32_t*,Kokkos::LayoutLeft,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> mins_view;Kokkos::View<int64_t**,Kokkos::LayoutRight,Kokkos::CudaSpace,Kokkos::Experimental::DefaultViewHooks> view2d; pk_functor_row_min(int32_t dim, Kokkos::View<int32_t*,Kokkos::LayoutLeft,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> mins_view, Kokkos::View<int64_t**,Kokkos::LayoutRight,Kokkos::CudaSpace,Kokkos::Experimental::DefaultViewHooks> view2d, int32_t pk_randpool_num_states, int32_t pk_randpool_seed){ this->dim= dim;this->mins_view= mins_view;this->view2d= view2d; }; pk_functor_row_min(int32_t dim, Kokkos::View<int32_t*,Kokkos::LayoutLeft,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> mins_view, Kokkos::View<int64_t**,Kokkos::LayoutRight,Kokkos::CudaSpace,Kokkos::Experimental::DefaultViewHooks> view2d){ this->dim= dim;this->mins_view= mins_view;this->view2d= view2d; };KOKKOS_FUNCTION void operator()(const row_min_tag& , int32_t tid)const{ mins_view(tid)= 999999;for (int32_t i= 0; (i < dim); (i += 1)){ if ((view2d(tid,i) > 0)&&(mins_view(tid) > view2d(tid,i))){ mins_view(tid)= view2d(tid,i); } }if ((mins_view(tid) == 999999)){ mins_view(tid)= - (1); } };};

#endif