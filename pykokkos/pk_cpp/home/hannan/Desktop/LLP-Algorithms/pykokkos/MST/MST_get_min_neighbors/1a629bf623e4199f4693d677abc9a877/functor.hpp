// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#ifndef PK_FUNCTOR_GET_MIN_NEIGHBORS_HPP
#define PK_FUNCTOR_GET_MIN_NEIGHBORS_HPP

template <class ExecSpace>struct pk_functor_get_min_neighbors{struct get_min_neighbors_tag{};int32_t dim;Kokkos::View<int64_t**,Kokkos::LayoutRight,Kokkos::HostSpace,Kokkos::Experimental::DefaultViewHooks> graph;Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> min_neighbors; pk_functor_get_min_neighbors(int32_t dim, Kokkos::View<int64_t**,Kokkos::LayoutRight,Kokkos::HostSpace,Kokkos::Experimental::DefaultViewHooks> graph, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> min_neighbors, int32_t pk_randpool_num_states, int32_t pk_randpool_seed){ this->dim= dim;this->graph= graph;this->min_neighbors= min_neighbors; }; pk_functor_get_min_neighbors(int32_t dim, Kokkos::View<int64_t**,Kokkos::LayoutRight,Kokkos::HostSpace,Kokkos::Experimental::DefaultViewHooks> graph, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> min_neighbors){ this->dim= dim;this->graph= graph;this->min_neighbors= min_neighbors; };KOKKOS_FUNCTION void operator()(const get_min_neighbors_tag& , int32_t tid)const{ int32_t mw_edge= 999999;int32_t mw_neighbor= - (1);for (int32_t i= 0; (i < dim); (i += 1)){ if ((graph(tid,i) > 0)&&(mw_edge > graph(tid,i))){ mw_edge= graph(tid,i);mw_neighbor= i; } }min_neighbors(tid)= mw_neighbor; };};

#endif