// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#ifndef PK_FUNCTOR_INIT_SOL_VIEW_HPP
#define PK_FUNCTOR_INIT_SOL_VIEW_HPP

template <class ExecSpace>struct pk_functor_init_sol_view{struct init_sol_view_tag{};Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> sol_view;Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> min_neighbors; pk_functor_init_sol_view(Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> sol_view, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> min_neighbors, int32_t pk_randpool_num_states, int32_t pk_randpool_seed){ this->sol_view= sol_view;this->min_neighbors= min_neighbors; }; pk_functor_init_sol_view(Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> sol_view, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> min_neighbors){ this->sol_view= sol_view;this->min_neighbors= min_neighbors; };KOKKOS_FUNCTION void operator()(const init_sol_view_tag& , int32_t tid)const{ int32_t same_edge= 0;if ((tid == min_neighbors(min_neighbors(tid)))){ same_edge= 1; }if (! (same_edge)||same_edge&&(tid < min_neighbors(tid))){ sol_view(tid)= min_neighbors(tid); }else { sol_view(tid)= tid; } };};

#endif