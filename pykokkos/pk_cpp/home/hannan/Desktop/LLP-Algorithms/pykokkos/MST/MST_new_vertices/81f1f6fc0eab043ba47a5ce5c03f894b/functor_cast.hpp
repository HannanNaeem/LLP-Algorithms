// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#ifndef PK_FUNCTOR_NEW_VERTICES_CAST__HPP
#define PK_FUNCTOR_NEW_VERTICES_CAST__HPP

#include <pybind11/pybind11.h>
#include <Kokkos_Core.hpp>
#include <Kokkos_Random.hpp>
#include <Kokkos_Sort.hpp>
#include <fstream>
#include <iostream>
#include <cmath>
#include <functor.hpp>

template <class ExecSpace,class ArgumentMemorySpace> pk_functor_new_vertices<ExecSpace> pk_functor_new_vertices_from_pyObject(pybind11::object obj) {Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> sol_view = getattr(obj,"sol_view").cast<Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> new_sol_view = getattr(obj,"new_sol_view").cast<Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();ExecSpace pk_exec_space_instance;auto pk_d_sol_view = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, sol_view);auto pk_d_new_sol_view = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, new_sol_view);pk_functor_new_vertices<ExecSpace> pk_f(pk_d_sol_view,pk_d_new_sol_view);return pk_f;}
template <class ExecSpace,class ArgumentMemorySpace> void pk_functor_new_vertices_to_pyObject(pk_functor_new_vertices<ExecSpace>& functor, pybind11::object obj) {Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> sol_view = pybind11::getattr(obj,"sol_view").cast<Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> new_sol_view = pybind11::getattr(obj,"new_sol_view").cast<Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();Kokkos::resize(sol_view,functor.sol_view.extent(0));Kokkos::deep_copy(sol_view, functor.sol_view);Kokkos::resize(new_sol_view,functor.new_sol_view.extent(0));Kokkos::deep_copy(new_sol_view, functor.new_sol_view);pybind11::setattr(obj,"sol_view",pybind11::cast(sol_view));pybind11::setattr(obj,"new_sol_view",pybind11::cast(new_sol_view));}

#endif