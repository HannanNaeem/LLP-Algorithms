// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#ifndef PK_FUNCTOR_COMPONENT_MIN_HPP
#define PK_FUNCTOR_COMPONENT_MIN_HPP

template <class ExecSpace>struct pk_functor_component_min{struct component_min_tag{};int32_t dim;Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> sol_view;Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> mins_view;Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> component_mins; pk_functor_component_min(int32_t dim, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> sol_view, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> mins_view, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> component_mins, int32_t pk_randpool_num_states, int32_t pk_randpool_seed){ this->dim= dim;this->sol_view= sol_view;this->mins_view= mins_view;this->component_mins= component_mins; }; pk_functor_component_min(int32_t dim, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> sol_view, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> mins_view, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> component_mins){ this->dim= dim;this->sol_view= sol_view;this->mins_view= mins_view;this->component_mins= component_mins; };KOKKOS_FUNCTION void operator()(const component_min_tag& , int32_t tid)const{ component_mins(tid)= mins_view(tid);for (int32_t i= 0; (i < dim); (i += 1)){ if ((sol_view(tid) == sol_view(i))&&(mins_view(i) > 0)&&(mins_view(tid) > mins_view(i))){ component_mins(tid)= mins_view(i); } } };};

#endif