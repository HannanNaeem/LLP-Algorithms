// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#ifndef PK_FUNCTOR_NEW_VERTICES_HPP
#define PK_FUNCTOR_NEW_VERTICES_HPP

template <class ExecSpace>struct pk_functor_new_vertices{struct new_vertices_tag{};Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> sol_view;Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> new_sol_view; pk_functor_new_vertices(Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> sol_view, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> new_sol_view, int32_t pk_randpool_num_states, int32_t pk_randpool_seed){ this->sol_view= sol_view;this->new_sol_view= new_sol_view; }; pk_functor_new_vertices(Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> sol_view, Kokkos::View<int32_t*,Kokkos::LayoutRight,typename ExecSpace::memory_space,Kokkos::Experimental::DefaultViewHooks> new_sol_view){ this->sol_view= sol_view;this->new_sol_view= new_sol_view; };KOKKOS_FUNCTION void operator()(const new_vertices_tag& , int32_t tid, double& acc)const{ if ((sol_view(tid) != tid)){ new_sol_view(tid)= - (1); }else { acc += 1; } };};

#endif