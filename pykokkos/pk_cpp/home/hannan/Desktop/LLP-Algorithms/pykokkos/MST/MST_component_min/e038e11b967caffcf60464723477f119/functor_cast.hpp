// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#ifndef PK_FUNCTOR_COMPONENT_MIN_CAST__HPP
#define PK_FUNCTOR_COMPONENT_MIN_CAST__HPP

#include <pybind11/pybind11.h>
#include <Kokkos_Core.hpp>
#include <Kokkos_Random.hpp>
#include <Kokkos_Sort.hpp>
#include <fstream>
#include <iostream>
#include <cmath>
#include <functor.hpp>

template <class ExecSpace,class ArgumentMemorySpace> pk_functor_component_min<ExecSpace> pk_functor_component_min_from_pyObject(pybind11::object obj) {int32_t dim = getattr(obj,"dim").cast<int32_t>();Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> sol_view = getattr(obj,"sol_view").cast<Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> mins_view = getattr(obj,"mins_view").cast<Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> component_mins = getattr(obj,"component_mins").cast<Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();ExecSpace pk_exec_space_instance;auto pk_d_sol_view = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, sol_view);auto pk_d_mins_view = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, mins_view);auto pk_d_component_mins = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, component_mins);pk_functor_component_min<ExecSpace> pk_f(dim,pk_d_sol_view,pk_d_mins_view,pk_d_component_mins);return pk_f;}
template <class ExecSpace,class ArgumentMemorySpace> void pk_functor_component_min_to_pyObject(pk_functor_component_min<ExecSpace>& functor, pybind11::object obj) {int32_t dim = pybind11::getattr(obj,"dim").cast<int32_t>();Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> sol_view = pybind11::getattr(obj,"sol_view").cast<Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> mins_view = pybind11::getattr(obj,"mins_view").cast<Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> component_mins = pybind11::getattr(obj,"component_mins").cast<Kokkos::View<int32_t*,Kokkos::LayoutLeft,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();Kokkos::resize(sol_view,functor.sol_view.extent(0));Kokkos::deep_copy(sol_view, functor.sol_view);Kokkos::resize(mins_view,functor.mins_view.extent(0));Kokkos::deep_copy(mins_view, functor.mins_view);Kokkos::resize(component_mins,functor.component_mins.extent(0));Kokkos::deep_copy(component_mins, functor.component_mins);pybind11::setattr(obj,"dim",pybind11::cast(dim));pybind11::setattr(obj,"sol_view",pybind11::cast(sol_view));pybind11::setattr(obj,"mins_view",pybind11::cast(mins_view));pybind11::setattr(obj,"component_mins",pybind11::cast(component_mins));}

#endif