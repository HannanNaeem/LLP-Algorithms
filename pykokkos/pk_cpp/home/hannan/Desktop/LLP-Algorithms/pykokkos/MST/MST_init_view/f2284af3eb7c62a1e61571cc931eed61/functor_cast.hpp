// ******* AUTOMATICALLY GENERATED BY PyKokkos *******
#ifndef PK_FUNCTOR_INIT_VIEW_CAST__HPP
#define PK_FUNCTOR_INIT_VIEW_CAST__HPP

#include <pybind11/pybind11.h>
#include <Kokkos_Core.hpp>
#include <Kokkos_Random.hpp>
#include <Kokkos_Sort.hpp>
#include <fstream>
#include <iostream>
#include <cmath>
#include <functor.hpp>

template <class ExecSpace,class ArgumentMemorySpace> pk_functor_init_view<ExecSpace> pk_functor_init_view_from_pyObject(pybind11::object obj) {int32_t init_val = getattr(obj,"init_val").cast<int32_t>();Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> view = getattr(obj,"view").cast<Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();ExecSpace pk_exec_space_instance;auto pk_d_view = Kokkos::create_mirror_view_and_copy(pk_exec_space_instance, view);pk_functor_init_view<ExecSpace> pk_f(init_val,pk_d_view);return pk_f;}
template <class ExecSpace,class ArgumentMemorySpace> void pk_functor_init_view_to_pyObject(pk_functor_init_view<ExecSpace>& functor, pybind11::object obj) {int32_t init_val = pybind11::getattr(obj,"init_val").cast<int32_t>();Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks> view = pybind11::getattr(obj,"view").cast<Kokkos::View<int32_t*,Kokkos::LayoutRight,ArgumentMemorySpace,Kokkos::Experimental::DefaultViewHooks>>();Kokkos::resize(view,functor.view.extent(0));Kokkos::deep_copy(view, functor.view);pybind11::setattr(obj,"init_val",pybind11::cast(init_val));pybind11::setattr(obj,"view",pybind11::cast(view));}

#endif